// LIBRARY //                                       
#include <LiquidCrystal.h>
#include "NewPing.h"
#include<Wire.h>

// ENCODER //
const byte interruptPin = 19;
volatile byte state = LOW;
volatile unsigned int counter =0;
//const float circumference = 21.3628; //wheel's circumference (cm)
const int circumference = 21;
int initialCounter=0;

// MPU6050 //
float RateRoll, RatePitch, RateYaw;
float AccX, AccY, AccZ;
float inclineAngle, AnglePitch;
float LoopTimer;
double upAngle=0.0;
int initialTime;

// LCD Keypad Shield //
const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// HC-SR04 //
#define TRIGGER_PIN 42
#define ECHO_PIN 44
const int trigPin = 42;
const int echoPin = 44;
long duration;
int obstacleDistance;
const int initialDistance;
#define MAX_DISTANCE 6
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);

// INFRARED RAY SENSOR//
int IRcounter;
int IR1 = 49; //Left Sensor
int IR2 = 45;  //Right Sensor

// L298N Driver // 
int EnA = 12;
int EnB = 11;
int In2 = 52;
int In1 = 26;
int In4 = 36;
int In3 = 32;

// FLAG // 
int flagEncoder=1;
//int flagB=1;
int flagBoost=1;
int obstacleOnce=1;
int boostOnce=1;
int spinFlag = 1;
int rampFlag = 1;
int distanceFlag=1;
int travel_10cm_Flag = 1;

////////////////////////////////////FUNCTIONS DECLARATION//////////////////////////////////////////////////////////
void setup();

// Calculate counter // 
void blink();

// MPU6050 //
void gyro_signals(void);

// MOTOR //
void forward();
void speedForward();
void turnRight();
void turnLeft();
void stop();
void boost();
void backward();
void rampTurnLeft();
void rampTurnRight();
void rampForwardDown();
void spin360();

// MOTOR + SENSOR //
void beforeUpRamp();
void upRamp();
void downRamp();
void travel_10cm();
void followLineOnly();

// LCD PRINT //
void lcd_print_Distance_Time(int initialTime);
void lcd_print_Angle();

// HC-SR04 //
void HC_SR04();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() { // This program will run continuously.
  Serial.print("Distance: ");
  Serial.print(counter/20 * circumference);
  Serial.print(" cm");

  return (0);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////FUNCTIONS CONTENT////////////////////////////////////////////////////

void setup() {                   // This program will only run once.
  // Initialize the pins as inputs and outputs.
  pinMode(EnA, OUTPUT);
  pinMode(EnB, OUTPUT); 

  pinMode(In1, OUTPUT);
  pinMode(In2, OUTPUT);
  pinMode(In3, OUTPUT);
  pinMode(In4, OUTPUT);

  pinMode(IR1, INPUT);
  pinMode(IR2, INPUT);

  //pinMode(encoder1,INPUT);
  //pinMode(encoder2,INPUT);

  pinMode(trigPin,OUTPUT);
  pinMode(echoPin,INPUT);

  //MPU6050
  pinMode(13, OUTPUT);
  digitalWrite(13, HIGH);
  Wire.setClock(400000);
  Wire.begin();
  delay(250);
  Wire.beginTransmission(0x68); 
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();

  pinMode(interruptPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(interruptPin), blink, CHANGE);

  Serial.begin(9600);
  lcd.begin(16, 2);

}

void blink() {
  counter++;
}

void gyro_signals(void) {
  Wire.beginTransmission(0x68);
  Wire.write(0x1A);
  Wire.write(0x05);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x1C);
  Wire.write(0x10);
  Wire.endTransmission();
  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission(); 
  Wire.requestFrom(0x68,6);
  int16_t AccXLSB = Wire.read() << 8 | Wire.read();
  int16_t AccYLSB = Wire.read() << 8 | Wire.read();
  int16_t AccZLSB = Wire.read() << 8 | Wire.read();
  Wire.beginTransmission(0x68);
  Wire.write(0x1B); 
  Wire.write(0x8);
  Wire.endTransmission();                                                   
  Wire.beginTransmission(0x68);
  Wire.write(0x43);
  Wire.endTransmission();
  Wire.requestFrom(0x68,6);
  int16_t GyroX=Wire.read()<<8 | Wire.read();
  int16_t GyroY=Wire.read()<<8 | Wire.read();
  int16_t GyroZ=Wire.read()<<8 | Wire.read();
  RateRoll=(float)GyroX/65.5;
  RatePitch=(float)GyroY/65.5;
  RateYaw=(float)GyroZ/65.5;
  AccX=(float)AccXLSB/4096;
  AccY=(float)AccYLSB/4096;
  AccZ=(float)AccZLSB/4096;
  inclineAngle=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);
}

void forward(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 60);   //Right motor 
  analogWrite(EnB, 60);   //Left motor
}

void speedForward(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 90);   //Right motor 
  analogWrite(EnB, 90);   //Left motor
}

void turnRight(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, HIGH);
  digitalWrite(In4, LOW);
  analogWrite(EnA, 155);
  analogWrite(EnB, 155);
}

void turnLeft(){
  digitalWrite(In1, LOW);
  digitalWrite(In2, HIGH);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 155);
  analogWrite(EnB, 155);
}

void stop(){
  digitalWrite(In1, LOW);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, LOW);
  analogWrite(EnA, 0);
  analogWrite(EnB, 0);
}

void boost(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 215);   
  analogWrite(EnB, 215);   
}

void backward(){
  digitalWrite(In1, LOW);
  digitalWrite(In2, HIGH);
  digitalWrite(In3, HIGH);
  digitalWrite(In4, LOW);
  analogWrite(EnA, 255);   //Right motor 
  analogWrite(EnB, 255);   //Left motor
}

void rampTurnLeft(){
  digitalWrite(In1, LOW);
  digitalWrite(In2, HIGH);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 150);
  analogWrite(EnB, 150);
}

void rampTurnRight(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, HIGH);
  digitalWrite(In4, LOW);
  analogWrite(EnA, 150);
  analogWrite(EnB, 150);
}

void rampForwardDown(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, LOW);
  digitalWrite(In4, HIGH);
  analogWrite(EnA, 40);   //Right motor 
  analogWrite(EnB, 40);   //Left motor
}

void spin360(){
  digitalWrite(In1, HIGH);
  digitalWrite(In2, LOW);
  digitalWrite(In3, HIGH);
  digitalWrite(In4, LOW);
  analogWrite(EnA, 255);
  analogWrite(EnB, 0);
}

void lcd_print_Distance_Time(int initialTime){
  lcd.setCursor(0, 0);
  lcd.print("Time:");
  lcd.print(millis()/1000);
  lcd.print(" s");
  lcd.setCursor(0, 1);
  lcd.print("Distance:");
  lcd.print((int)((counter/20 * circumference)/3.8));
  lcd.print("cm"); 
}

void lcd_print_Angle(){
  lcd.setCursor(0, 0);
  lcd.print("Angle:");
  lcd.print(upAngle);
  lcd.print(" deg");
}

void HC_SR04(){
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
}

void beforeUpRamp(){
  if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up
    //Stop both motors
    stop();
  } 

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
    //Move both motors
    speedForward();
    //boost();
    //stop();
    //forward();
  }

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){
    //Towards Right by stopping right wheels
    turnRight();
    delay(50);
  }

  else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
    //Towards Left by stopping left wheels
    turnLeft();
    delay(50);
  }
}

void upRamp(){
  if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up
    //Stop both motors
    forward();
  }

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
    //Move both motors
    boost();
  }

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){
    //Towards Right by stopping right wheels
    rampTurnRight();
    delay(50);
  }

  else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
    //Towards Left by stopping left wheels
    rampTurnLeft();
    delay(50);
  }
  if (inclineAngle > upAngle) upAngle=inclineAngle;
}

void downRamp(){
  for (int t=0; t <= 2300; t++){
    if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up
      //Stop both motors
      forward();
    }
    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
      forward();
    } 
    /*
    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH && inclineAngle >= -10.0){ //IR not on black line
      rampForwardDown();
    } 

    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH && inclineAngle < -10.0){ //IR not on black line
      //rampForwardDown();
      backward();
    } 
    */
    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){
      //Towards Right by stopping right wheels
      //turnRight();
      rampTurnRight();
      delay(50);
    }

    else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
      //Towards Left by stopping left wheels
      //turnLeft();
      rampTurnLeft();
      delay(50);
    }
    delay(1);
  }
}

void travel_10cm(int initialCounter){
  boost();
  delay(6);
  while (counter < (initialCounter + 50)){
    //Serial.print("distance inside loop");
    //Serial.println(distance);
    if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up
      //Stop both motors
      stop();
    } 

    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
      //Move both motors
      forward();
    }

    else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){
      //Towards Right by stopping right wheels
      turnRight();
      delay(50);
    }

    else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
      //Towards Left by stopping left wheels
      turnLeft();
      delay(50);
    }
    lcd_print_Distance_Time(initialTime);
  }
}

void followLineOnly(){
  if (digitalRead(IR1)==LOW && digitalRead(IR2)==LOW){  //IR will not light up
    //Stop both motors
    stop();
  }

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==HIGH){ //IR not on black line
    //Move both motors
    forward();
  }

  else if (digitalRead(IR1)==HIGH && digitalRead(IR2)==LOW){
    //Towards Right by stopping right wheels
    turnRight();
    delay(50);
  }

  else if (digitalRead(IR1)==LOW && digitalRead(IR2)==HIGH){
    //Towards Left by stopping left wheels
    turnLeft();
    delay(50);
  }
}


